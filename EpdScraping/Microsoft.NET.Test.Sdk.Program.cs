// <auto-generated> This file has been auto generated. </auto-generated>
using System;
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support;
using OpenQA.Selenium.Support.UI;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.VisualStudio.CodeCoverage;


[Microsoft.VisualStudio.TestPlatform.TestSDKAutoGeneratedCode]
class AutoGeneratedProgram
{
    static void Main(string[] args)
    {
        DateTime timeStart = DateTime.Now;
        Console.WriteLine(timeStart.ToLongTimeString());

        List<String> motifs = new List<String>();

        //Create instance of ChromeOptions Class
        ChromeOptions handlingSSL = new ChromeOptions();

        //Using the accept insecure cert method with true as parameter to accept the untrusted certificate
        //handlingSSL.setAcceptInsecureCerts(true);
        handlingSSL.AcceptInsecureCertificates = true;

        IWebDriver driver = new ChromeDriver(handlingSSL);
        
        driver.Url = "http://epd.epfl.ch//index.php";
        //database: H. sapiens - 1
        //database: Macaca mulatta - 3
        //database: M. musculus - 4
        //database: R. norvegicus - 6
        //database: A. thaliana - 13
        SelectElement dbSelect = new SelectElement(driver.FindElement(By.Id("db")));
        dbSelect.SelectByIndex(1);
        IWebElement db = dbSelect.SelectedOption;
        String database = db.Text;

        String[] queries = {"UCP1", "UCP2", "UCP3"
            "PPARG", "PPARA", "PRDM16", "PPARGC1A", "DIO2", "HIF1A",
            "LEP", "ADIPOQ", "CPT2", "CPT1A", "CPT1B", "SAA1",
            "GIPR", "INSR", "SLC2A4" , "SLC2A1", "VEGFA", "CIRBP"
        };
        
        String query;
        IWebElement ucp;
        IWebElement search;
        SelectElement motiflibSelect;
        IWebElement submotiflibSelect;
        IWebElement motifLib;
        String motiflib;
        SelectElement plotfromSelect;
        IWebElement From;
        String from;
        SelectElement plottoSelect;
        IWebElement To;
        String to;
        SelectElement motifcutoffSelect;
        IWebElement p;
        String p_value;
        SelectElement motifSelect;
        IList<IWebElement> list;
        IWebElement motifSearch;
        IWebElement result;
        Boolean wait;
        String head;
        String f;
        Task asyncTask;
        DateTime timeStop;

        foreach (String q in queries)
        {
            motifs.Clear();
            //String query = q;
            query = q;
            //IWebElement ucp = driver.FindElement(By.Id("query"));
            ucp = driver.FindElement(By.Id("query"));
            ucp.SendKeys(query);

            //epdsubmit: SEARCH
            //IWebElement search = driver.FindElement(By.ClassName("epdsubmit"));
            search = driver.FindElement(By.ClassName("epdsubmit"));
            search.Click();

            //Select Motif Library: Taranscription Factor Motifs (1)
            //SelectElement motiflibSelect = new SelectElement(driver.FindElement(By.Id("motifLibrary")));
            motiflibSelect = null;
            submotiflibSelect = null;
            try
            {
                motiflibSelect = new SelectElement(driver.FindElement(By.Id("motifLibrary")));
            }
            catch (NoSuchElementException e)
            {
                ///html/body/div[2]/div[5]/div[3]/div[2]/form/div/table/tbody/tr[2]/td[2]/a
                submotiflibSelect = driver.FindElement(By.XPath("/html/body/div[2]/div[5]/div[3]/div[2]/form/div/table/tbody/tr[2]/td[2]/a"));
                submotiflibSelect.Click();
                motiflibSelect = new SelectElement(driver.FindElement(By.Id("motifLibrary")));
            }
            motiflibSelect.SelectByIndex(1);
            //IWebElement motifLib = motiflibSelect.SelectedOption;
            motifLib = motiflibSelect.SelectedOption;
            //String motiflib = motifLib.Text;
            motiflib = motifLib.Text;

            //From: -5000 (2)
            //SelectElement plotfromSelect = new SelectElement(driver.FindElement(By.Id("plotFrom")));
            plotfromSelect = new SelectElement(driver.FindElement(By.Id("plotFrom")));
            plotfromSelect.SelectByIndex(2);
            //IWebElement From = plotfromSelect.SelectedOption;
            From = plotfromSelect.SelectedOption;
            //String from = From.Text;
            from = From.Text;

            //To: 1000 (1)
            //SelectElement plottoSelect = new SelectElement(driver.FindElement(By.Id("plotTo")));
            plottoSelect = new SelectElement(driver.FindElement(By.Id("plotTo")));
            plottoSelect.SelectByIndex(1);
            //IWebElement To = plottoSelect.SelectedOption;
            To = plottoSelect.SelectedOption;
            //String to = To.Text;
            to = To.Text;

            //p-value of: 0.0001, 0.00001 (2) (3)
            //SelectElement motifcutoffSelect = new SelectElement(driver.FindElement(By.Id("motifCutoff")));
            motifcutoffSelect = new SelectElement(driver.FindElement(By.Id("motifCutoff")));
            motifcutoffSelect.SelectByIndex(2);
            //IWebElement p = motifcutoffSelect.SelectedOption;
            p = motifcutoffSelect.SelectedOption;
            p_value = p.Text;

            //Select Motif: all        
            //SelectElement motifSelect = new SelectElement(driver.FindElement(By.Id("p_tf")));
            motifSelect = new SelectElement(driver.FindElement(By.Id("p_tf")));
            System.Threading.Thread.Sleep(1000);
            //IList<IWebElement> list = motifSelect.Options;
            list = motifSelect.Options;

            int size = list.Count();
            for (int i = 0; i < size; i++)
            {
                motifSelect.SelectByIndex(i);

                //plotGene(): SEARCH
                //IWebElement motifSearch = driver.FindElement(By.XPath("/html/body/div[2]/div[5]/div[3]/div[2]/table[5]/tbody/tr[3]/td/input"));
                motifSearch = driver.FindElement(By.XPath("/html/body/div[2]/div[5]/div[3]/div[2]/table[5]/tbody/tr[3]/td/input"));
                motifSearch.Click();

                System.Threading.Thread.Sleep(3000);

                //Boolean wait;
                do
                    try
                    {
                        wait = false;
                        //IWebElement result = driver.FindElement(By.XPath("//div[@id='plotGene']/p[1]"));
                        result = driver.FindElement(By.XPath("//div[@id='plotGene']/p[1]"));
                        if (result.Text.Length != 0)
                            motifs.Add(result.Text);
                        else
                            wait = true;
                    }
                    catch (Exception)
                    {
                        wait = true;
                        System.Threading.Thread.Sleep(3000);
                    }
                while (wait);

            }

            head = "database:" + database + " query:" + query + " Library:" + motiflib + " From:" + from + " To:" + to + " p-value:" + p_value;
            f = "C:\\Adatok\\Debrecen\\" + database + "-" + query + "-" + p_value + ".txt";
            //Task asyncTask = writetofile(head, f, motifs);
            asyncTask = writetofile(head, f, motifs);
            asyncTask.Wait();
            //DateTime timeStop = DateTime.Now;
            timeStop = DateTime.Now;
            Console.WriteLine(timeStop.ToLongTimeString());
            }
        driver.Close();
        driver.Quit();
    }

    private static async Task writetofile(String head, String f, List<String> motifs)
    {
        try
        {
            StreamWriter streamWriter = new StreamWriter(f);
            streamWriter.WriteLine(head);
            foreach (String row in motifs)
            {
                String m = row.Substring(0, row.IndexOf(" "));
                String r = row.Substring(row.LastIndexOf(": ") + 2);
                String[] numbers = r.Split(',');
                String outrow = m.Trim();
                for (int i = 0; i < numbers.Length; i++)
                {
                    outrow += "\t" + numbers[i].Trim();
                }
                await streamWriter.WriteLineAsync(outrow);
            }
            streamWriter.Close();
            streamWriter = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
